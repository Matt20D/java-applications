# Spring App Properties
spring.application.name="springboot-kafka application"
server.port=8080
server.address=localhost

# Kafka Properties

#
# Consumer Properties
#

# me creating a topic constant here
mykafka.topicname=javaguides-topic
mykafka.topicnamejson=javaguides-topic-json

# if we have more brokers localhost:9092, 9093, 9094, ...
spring.kafka.consumer.bootstrap-servers=localhost:9092
# consumer group, where the consumers belong to. This is my ID where the consumers belong to
spring.kafka.consumer.group-id=myGroup
# this property specifies what to do when there is no recent offset, or the previous offset is gone.
# so return to the earliest offset
spring.kafka.consumer.auto-offset-reset=earliest
# use this class in order to deserialize strings
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Spring kafka library will now convert the Json Byte[] into Java Object
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# I can now use all of the POJO classes that I have in order to deserialize
spring.kafka.consumer.properties.spring.json.trusted.packages=*

#
# Producer Properties
#

# this producer is using the same broker server
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Spring kafka library will now conver the Java Object into a Json Byte[]
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer